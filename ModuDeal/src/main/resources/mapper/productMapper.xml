<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.application.moduDeal.product.dao.ProductDAO">

	<!-- 상품 저장 -->
	<insert id="saveProduct" parameterType="ProductDTO"
		useGeneratedKeys="true" keyProperty="productId">
		INSERT INTO PRODUCT (
		TITLE,
		DESCRIPTION,
		QTY,
		PRICE,
		PRODUCT_CATEGORY,
		USER_ID,
		PRODUCT_AT
		)
		VALUES (
		#{title},
		#{description},
		#{qty},
		#{price},
		#{productCategory},
		#{userId},
		#{productAt, jdbcType=TIMESTAMP}
		)
	</insert>

	<!-- 상품 이미지 저장 -->
	<insert id="saveProductImages" parameterType="List">
		INSERT INTO PRODUCT_IMG (
		IMG_UUID,
		PRODUCT_ID,
		IMG_ORIGINAL_NAME,
		IMG_AT
		)
		VALUES
		<foreach collection="list" item="item" separator=",">
			(
			#{item.imgUuid},
			#{item.productId},
			#{item.imgOriginalName},
			#{item.imgAt, jdbcType=TIMESTAMP}
			)
		</foreach>
	</insert>

	<select id="getProductDetails" parameterType="int" resultType="ProductDTO">
	    SELECT		
	        PRODUCT_ID,
	        TITLE,
	        PRICE,
	        QTY,
	        DESCRIPTION,
	        PRODUCT_CATEGORY,
	        USER_ID  -- USER_ID 추가
	    FROM
	        PRODUCT
	    WHERE 
	        PRODUCT_ID = #{productId}
	</select>
	
	<select id="getProductImages" parameterType="int" resultType="ProductImgDTO">
	    SELECT 
	    		IMG_UUID, IMG_ORIGINAL_NAME, IMG_AT, PRODUCT_ID
	    FROM 
	    		PRODUCT_IMG
	    WHERE 
	    		PRODUCT_ID = #{productId}
	</select>

	<!-- 상품 결과 매핑 -->
	<resultMap id="ProductResultMap" type="hashmap">
	    <result property="productId" column="PRODUCT_ID" />
	    <result property="title" column="TITLE" />
	    <result property="qty" column="QTY" />
	    <result property="description" column="DESCRIPTION" />
	    <result property="price" column="PRICE" />
	    <result property="imgUuid" column="IMG_UUID" />
	    <result property="imgOriginalName" column="IMG_ORIGINAL_NAME" />
	    <result property="imgAt" column="IMG_AT" />
	    <result property="productAt" column="PRODUCT_AT" />
	</resultMap>
	
	<!-- 최근 상품 목록 가져오기 -->
	<select id="getRecentProducts" resultType="hashmap">
	    SELECT
	        P.PRODUCT_ID AS PRODUCT_ID,
	        P.TITLE AS TITLE,
	        P.PRICE AS PRICE,
	        P.QTY AS QTY,
	        P.DESCRIPTION AS DESCRIPTION,
	        (
	            SELECT IMG_UUID 
	            FROM PRODUCT_IMG 
	            WHERE PRODUCT_ID = P.PRODUCT_ID 
	            ORDER BY IMG_AT ASC 
	            LIMIT 1
	        ) AS IMG_UUID,
	        (
	            SELECT IMG_ORIGINAL_NAME 
	            FROM PRODUCT_IMG 
	            WHERE PRODUCT_ID = P.PRODUCT_ID 
	            ORDER BY IMG_AT ASC 
	            LIMIT 1
	        ) AS IMG_ORIGINAL_NAME,
	        P.PRODUCT_AT AS PRODUCT_AT
	    FROM
	        PRODUCT P
	    ORDER BY 
	        P.PRODUCT_AT DESC
	    LIMIT 12
	</select>
	
	<resultMap id="CustomProductResultMap" type="ProductDTO">
    <id property="productId" column="PRODUCT_ID" />
    <result property="title" column="TITLE" />
    <result property="description" column="DESCRIPTION" />
    <result property="qty" column="QTY" />
    <result property="price" column="PRICE" />
    <result property="productCategory" column="PRODUCT_CATEGORY" />
    <result property="userId" column="USER_ID" />
    <result property="productAt" column="PRODUCT_AT" />
    <collection property="productImages" ofType="ProductImgDTO">
        <result property="imgUuid" column="IMG_UUID" />
        <result property="imgOriginalName" column="IMG_ORIGINAL_NAME" />
        <result property="imgAt" column="IMG_AT" />
    </collection>
	</resultMap>
	
	
	<select id="getProductsByUserId" parameterType="string" resultMap="CustomProductResultMap">
	    SELECT
	        P.PRODUCT_ID,
	        P.TITLE,
	        P.DESCRIPTION,
	        P.QTY,
	        P.PRICE,
	        P.PRODUCT_CATEGORY,
	        P.USER_ID,
	        P.PRODUCT_AT,
	        PI.IMG_UUID AS IMG_UUID,
	        PI.IMG_ORIGINAL_NAME AS IMG_ORIGINAL_NAME,
	        PI.IMG_AT AS IMG_AT
	    FROM
	        PRODUCT P
	    LEFT JOIN (
	        SELECT 
	            IMG_UUID,
	            IMG_ORIGINAL_NAME,
	            IMG_AT,
	            PRODUCT_ID
	        FROM
	            PRODUCT_IMG
	        WHERE
	            PRODUCT_ID IN (
	                SELECT 
	                    PRODUCT_ID
	                FROM 
	                    PRODUCT
	                WHERE
	                    USER_ID = #{userId}
	            )
	        ORDER BY IMG_AT DESC
	        LIMIT 1
	    ) PI ON P.PRODUCT_ID = PI.PRODUCT_ID
	    WHERE
	        P.USER_ID = #{userId}
	    ORDER BY
	        P.PRODUCT_AT DESC
	</select>
	
	<update id="updateProduct" parameterType="ProductDTO">
	    UPDATE PRODUCT
	    SET TITLE = #{title},
	        DESCRIPTION = #{description},
	        QTY = #{qty},
	        PRICE = #{price},
	        PRODUCT_CATEGORY = #{productCategory}
	    WHERE PRODUCT_ID = #{productId}
	</update>
	
	<delete id="deleteProductImageById" parameterType="int">
	    DELETE FROM PRODUCT_IMG
	    WHERE IMG_ID = #{imageId}
	</delete>
	
	<delete id="deleteProductById" parameterType="int">
	    DELETE FROM PRODUCT WHERE PRODUCT_ID = #{productId};
	</delete>
	
	<delete id="deleteProductLikes" parameterType="int">
        DELETE FROM PRODUCT_LIKE WHERE PRODUCT_ID = #{productId}
    </delete>

    <delete id="deleteProductReviews" parameterType="int">
        DELETE FROM REVIEW WHERE PRODUCT_ID = #{productId}
    </delete>

    <delete id="deleteProductFromCart" parameterType="int">
        DELETE FROM CART WHERE PRODUCT_ID = #{productId}
    </delete>

    <delete id="deleteChatActivations" parameterType="int">
        DELETE FROM CHAT_ACTIVATION WHERE PRODUCT_ID = #{productId}
    </delete>

    <delete id="deleteChats" parameterType="int">
        DELETE FROM CHAT WHERE PRODUCT_ID = #{productId}
    </delete>

    <delete id="deleteProductImages" parameterType="int">
        DELETE FROM PRODUCT_IMG WHERE PRODUCT_ID = #{productId}
    </delete>
    
	<select id="getTopLikedProducts" resultType="hashmap">
        SELECT
            P.PRODUCT_ID AS PRODUCT_ID,
            P.TITLE AS TITLE,
            P.PRICE AS PRICE,
            P.QTY AS QTY,
            (
                SELECT IMG_UUID 
                FROM PRODUCT_IMG 
                WHERE PRODUCT_ID = P.PRODUCT_ID 
                ORDER BY IMG_AT ASC 
                LIMIT 1
            ) AS IMG_UUID,
            (
                SELECT COUNT(*)
                FROM PRODUCT_LIKE PL
                WHERE PL.PRODUCT_ID = P.PRODUCT_ID
            ) AS likeCount
        FROM
            PRODUCT P
        ORDER BY
            likeCount DESC
        LIMIT 12
    </select>
    
    <select id="getProductsByCategory" parameterType="string" resultType="hashmap">
        SELECT
            P.PRODUCT_ID AS PRODUCT_ID,
            P.TITLE AS TITLE,
            P.PRICE AS PRICE,
            P.QTY AS QTY,
            P.DESCRIPTION AS DESCRIPTION,
            (
                SELECT IMG_UUID 
                FROM PRODUCT_IMG 
                WHERE PRODUCT_ID = P.PRODUCT_ID 
                ORDER BY IMG_AT ASC 
                LIMIT 1
            ) AS IMG_UUID,
            (
                SELECT IMG_ORIGINAL_NAME 
                FROM PRODUCT_IMG 
                WHERE PRODUCT_ID = P.PRODUCT_ID 
                ORDER BY IMG_AT ASC 
                LIMIT 1
            ) AS IMG_ORIGINAL_NAME,
            P.PRODUCT_AT AS PRODUCT_AT
        FROM
            PRODUCT P
        WHERE
            P.PRODUCT_CATEGORY = #{category}
        ORDER BY 
            P.PRODUCT_AT DESC
    </select>

</mapper>